
Requirements
-----------------------------------------------------
Apache Web Server with SSL
MySQL
PHP 5.3+
PHP Modules:
  MDB2
  MDB2_Driver_mysql
  Doctrine ORM 1.2.4
  PHPSecLib



PHP Modules Installation
-----------------------------------------------------
PHP modules can be installed using the phpOp/checkDependencies.sh script
or the 'pear' command

  * MDB2 and MDB2_Driver_mysql
    > pear install MDB2
    > pear install MDB2_Driver_mysql

  * Doctrine ORM 1.2.4
    > pear channel-discover pear.doctrine-project.org
    > pear install doctrine/Doctrine-1.2.4

  * PHPSecLib
    > pear channel-discover phpseclib.sourceforge.net
    > pear install phpseclib/Crypt_AES
    > pear install phpseclib/Crypt_DES
    > pear install phpseclib/Crypt_Hash
    > pear install phpseclib/Crypt_RC4
    > pear install phpseclib/Crypt_RSA
    > pear install phpseclib/Crypt_Random
    > pear install phpseclib/Crypt_Rijndael
    > pear install phpseclib/Crypt_TripleDES
    > pear install phpseclib/File_ANSI
    > pear install phpseclib/File_ASN1
    > pear install phpseclib/File_X509
    > pear install phpseclib/Math_BigInteger





OP and RP Installation
-----------------------------------------------------
Copy phpOp and phpRp to the web server's document root directory, e.g. /var/www


Configuration
-----------------------------------------------------
  * Apache Configuration
    1) To enable "Dynamic Discovery", add the following configuration to Apache's web site configuration

       Alias /.well-known/webfinger /var/www/phpOp/discovery.php
       Alias /.well-known/openid-configuration /var/www/phpOp/discovery.php
       Alias /phpOp/.well-known/openid-configuration /var/www/phpOp/discovery.php

       The path /var/www may be different depending on the location of the server's web document root directory

	   If you do not have unrestricted/direct access to your Apache configuration, you may use a .htaccess file
	   together with mod_rewrite instead:

	   <IfModule mod_rewrite.c>
	   RewriteEngine on
	   RewriteRule ^.well-known/webfinger.*$ /phpOp/discovery.php$1 [NC,L]
	   RewriteRule ^.well-known/openid-configuration.*$ /phpOp/discovery.php$1 [NC,L]
	   RewriteRule ^phpOp/.well-known/openid-configuration.*$ /phpOp/discovery.php$1 [NC,L]
	   </IfModule>

  * Database Configuration
    The database can be configured by visiting the page at /phpOp/config.php or manually as follows :

    1) To create the database tables, use a mysql database client to execute the script file phpOp/create_db.sql
    2) Create a database user that is allowed read/write permissions to the database 'phpoidc_01'.
       Make note of the name and password.
    3) Edit the files phpOp/dbconf.php and phpRp/dbconf.php
       Replace the values for DB_USER and DB_PASSWORD with the new values.


  * Application Configuration

    The application configurations are kept in the files phpOP/abconstants.php and phpRp/abconstants.php
    Edit these files to make configuration changes.

    If the web server is listening on a non-standard SSL port, change the configuration options for the following:
    OP_PORT
    RP_PORT

    The values must be preceded by a ':', e.g. ":8443"



    OP and RP Signature and Encryption Keys
    The OP and RP samples come with demo keys. You may want to create new 2048 bit RSA keys.
    A new private key can be generated by using the ocmmand :
        openssl genrsa -out filename 2048
    A JWK can be generated by using the command
        php phpOp/makejwk.php path_to_key_filename kid ''
    Edit phpOP/abconstants.php and phpRp/abconstants.php to change the keys.
    The following constants need to be changed.
    OP_PKEY
    OP_PKEY_PASSPHRASE
    OP_SIG_KID
    OP_JWK_URL
    OP_ENC_JWK_URL

    RP_PKEY
    RP_PKEY_PASSPHRASE
    RP_SIG_KID
    RP_JWK_URL
    RP_ENC_JWK_URL



Nginx Configuration
-----------------------------------------------------
    1) To enable "Dynamic Discovery", add the following configuration to nginx's SSL server configuration
       (e.g. /etc/nginx/sites-enabled/default)


        location ~ /\.well-known/[webfinger|openid\-configuration] {
                alias /usr/share/nginx/www/phpOp/discovery.php;
                fastcgi_split_path_info ^(.+\.php)(/.+)$;

        #       # With php5-cgi alone:
                fastcgi_pass 127.0.0.1:9000;
        #       # With php5-fpm:
        #       fastcgi_pass unix:/var/run/php5-fpm.sock;
                fastcgi_index index.php;
                include fastcgi_params;
                fastcgi_param SCRIPT_FILENAME $request_filename;
        }

       The path /usr/share/nginx/www may be different depending on the location of the server's web document root directory
       The fastcgi_pass directive should be correctly configured for sockets or tcp.


    2) nginx does not have  PHP's PATH_INFO variable by default

        a) In the file /etc/nginx/fastcgi_params (path may be different), change the line :

        fastcgi_param   SCRIPT_FILENAME         $request_filename;

        to

        fastcgi_param   SCRIPT_FILENAME         $document_root$fastcgi_script_name;

        Add the following line to the end of the file :
        fastcgi_param   PATH_INFO               $fastcgi_path_info;


        b) In the file /etc/nginx/sites-enabled/default (path may be different), add the following to the SSL
        server's configuration:

        location ~ [^/]\.php(/|$) {
                fastcgi_split_path_info ^(.+?\.php)(/.*)$;
                if (!-f $document_root$fastcgi_script_name) {
                        return 404;
                }
        #       # With php5-cgi alone:
                fastcgi_pass 127.0.0.1:9000;
        #       # With php5-fpm:
        #       fastcgi_pass unix:/var/run/php5-fpm.sock;
                fastcgi_index index.php;
                include fastcgi_params;
        }

        c) In the file /etc/nginx/nginx.conf (path may be different), add the following lines to the http configuration :

            fastcgi_buffers 8 16k;
            fastcgi_buffer_size 32k;



        d) restart nginx for settings to take effect.





